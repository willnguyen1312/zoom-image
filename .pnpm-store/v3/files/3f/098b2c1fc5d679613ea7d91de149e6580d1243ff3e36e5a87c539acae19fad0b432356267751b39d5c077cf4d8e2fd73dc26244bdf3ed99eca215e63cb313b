{"version":3,"sources":["container/TreeContainer/OrderedSet.js","../../src/container/TreeContainer/OrderedSet.ts"],"names":["__extends","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__generator","thisArg","body","_","label","sent","t","trys","ops","f","y","g","next","verb","throw","return","Symbol","iterator","n","v","step","op","done","value","pop","length","push","e","TreeContainer","TreeIterator","throwIteratorAccessError","OrderedSetIterator","_super","node","header","container","iteratorType","_this","defineProperty","get","_node","_header","_key","enumerable","configurable","copy","OrderedSet","cmp","enableIndex","self","forEach","el","insert","begin","_left","end","rBegin","_right","rEnd","front","undefined","back","lowerBound","key","resNode","_lowerBound","_root","upperBound","_upperBound","reverseLowerBound","_reverseLowerBound","reverseUpperBound","_reverseUpperBound","callback","_inOrderTraversal","index","set","hint","_set","getElementByPos","pos","_length","RangeError","find","element","_getTreeNodeByKey","union","other","nodeList","i","_a"],"mappings":"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","file":"OrderedSet.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nvar OrderedSetIterator = /** @class */ (function (_super) {\n    __extends(OrderedSetIterator, _super);\n    function OrderedSetIterator(node, header, container, iteratorType) {\n        var _this = _super.call(this, node, header, iteratorType) || this;\n        _this.container = container;\n        return _this;\n    }\n    Object.defineProperty(OrderedSetIterator.prototype, \"pointer\", {\n        get: function () {\n            if (this._node === this._header) {\n                throwIteratorAccessError();\n            }\n            return this._node._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    OrderedSetIterator.prototype.copy = function () {\n        return new OrderedSetIterator(this._node, this._header, this.container, this.iteratorType);\n    };\n    return OrderedSetIterator;\n}(TreeIterator));\nvar OrderedSet = /** @class */ (function (_super) {\n    __extends(OrderedSet, _super);\n    /**\n     * @param container - The initialization container.\n     * @param cmp - The compare function.\n     * @param enableIndex - Whether to enable iterator indexing function.\n     * @example\n     * new OrderedSet();\n     * new OrderedSet([0, 1, 2]);\n     * new OrderedSet([0, 1, 2], (x, y) => x - y);\n     * new OrderedSet([0, 1, 2], (x, y) => x - y, true);\n     */\n    function OrderedSet(container, cmp, enableIndex) {\n        if (container === void 0) { container = []; }\n        var _this = _super.call(this, cmp, enableIndex) || this;\n        var self = _this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n        return _this;\n    }\n    OrderedSet.prototype.begin = function () {\n        return new OrderedSetIterator(this._header._left || this._header, this._header, this);\n    };\n    OrderedSet.prototype.end = function () {\n        return new OrderedSetIterator(this._header, this._header, this);\n    };\n    OrderedSet.prototype.rBegin = function () {\n        return new OrderedSetIterator(this._header._right || this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    OrderedSet.prototype.rEnd = function () {\n        return new OrderedSetIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    };\n    OrderedSet.prototype.front = function () {\n        return this._header._left ? this._header._left._key : undefined;\n    };\n    OrderedSet.prototype.back = function () {\n        return this._header._right ? this._header._right._key : undefined;\n    };\n    OrderedSet.prototype.lowerBound = function (key) {\n        var resNode = this._lowerBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.upperBound = function (key) {\n        var resNode = this._upperBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.reverseLowerBound = function (key) {\n        var resNode = this._reverseLowerBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.reverseUpperBound = function (key) {\n        var resNode = this._reverseUpperBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.forEach = function (callback) {\n        this._inOrderTraversal(function (node, index, set) {\n            callback(node._key, index, set);\n        });\n    };\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param hint - You can give an iterator hint to improve insertion efficiency.\n     * @return The size of container after setting.\n     * @example\n     * const st = new OrderedSet([2, 4, 5]);\n     * const iter = st.begin();\n     * st.insert(1);\n     * st.insert(3, iter);  // give a hint will be faster.\n     */\n    OrderedSet.prototype.insert = function (key, hint) {\n        return this._set(key, undefined, hint);\n    };\n    OrderedSet.prototype.getElementByPos = function (pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        var node = this._inOrderTraversal(pos);\n        return node._key;\n    };\n    OrderedSet.prototype.find = function (element) {\n        var resNode = this._getTreeNodeByKey(this._root, element);\n        return new OrderedSetIterator(resNode, this._header, this);\n    };\n    OrderedSet.prototype.union = function (other) {\n        var self = this;\n        other.forEach(function (el) {\n            self.insert(el);\n        });\n        return this._length;\n    };\n    OrderedSet.prototype[Symbol.iterator] = function () {\n        var length, nodeList, i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    length = this._length;\n                    nodeList = this._inOrderTraversal();\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < length)) return [3 /*break*/, 4];\n                    return [4 /*yield*/, nodeList[i]._key];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    ++i;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/];\n            }\n        });\n    };\n    return OrderedSet;\n}(TreeContainer));\nexport default OrderedSet;\n","import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { TreeNode } from './Base/TreeNode';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass OrderedSetIterator<K> extends TreeIterator<K, undefined> {\n  container: OrderedSet<K>;\n  constructor(\n    node: TreeNode<K, undefined>,\n    header: TreeNode<K, undefined>,\n    container: OrderedSet<K>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key!;\n  }\n  copy() {\n    return new OrderedSetIterator<K>(\n      this._node,\n      this._header,\n      this.container,\n      this.iteratorType\n    );\n  }\n  // @ts-ignore\n  equals(iter: OrderedSetIterator<K>): boolean;\n}\n\nexport type { OrderedSetIterator };\n\nclass OrderedSet<K> extends TreeContainer<K, undefined> {\n  /**\n   * @param container - The initialization container.\n   * @param cmp - The compare function.\n   * @param enableIndex - Whether to enable iterator indexing function.\n   * @example\n   * new OrderedSet();\n   * new OrderedSet([0, 1, 2]);\n   * new OrderedSet([0, 1, 2], (x, y) => x - y);\n   * new OrderedSet([0, 1, 2], (x, y) => x - y, true);\n   */\n  constructor(\n    container: initContainer<K> = [],\n    cmp?: (x: K, y: K) => number,\n    enableIndex?: boolean\n  ) {\n    super(cmp, enableIndex);\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  begin() {\n    return new OrderedSetIterator<K>(\n      this._header._left || this._header,\n      this._header,\n      this\n    );\n  }\n  end() {\n    return new OrderedSetIterator<K>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new OrderedSetIterator<K>(\n      this._header._right || this._header,\n      this._header,\n      this,\n      IteratorType.REVERSE\n    );\n  }\n  rEnd() {\n    return new OrderedSetIterator<K>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    return this._header._left ? this._header._left._key : undefined;\n  }\n  back() {\n    return this._header._right ? this._header._right._key : undefined;\n  }\n  lowerBound(key: K) {\n    const resNode = this._lowerBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  upperBound(key: K) {\n    const resNode = this._upperBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  reverseLowerBound(key: K) {\n    const resNode = this._reverseLowerBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  reverseUpperBound(key: K) {\n    const resNode = this._reverseUpperBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  forEach(callback: (element: K, index: number, set: OrderedSet<K>) => void) {\n    this._inOrderTraversal(function (node, index, set) {\n      callback(node._key as K, index, set);\n    });\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param hint - You can give an iterator hint to improve insertion efficiency.\n   * @return The size of container after setting.\n   * @example\n   * const st = new OrderedSet([2, 4, 5]);\n   * const iter = st.begin();\n   * st.insert(1);\n   * st.insert(3, iter);  // give a hint will be faster.\n   */\n  insert(key: K, hint?: OrderedSetIterator<K>) {\n    return this._set(key, undefined, hint);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    const node = this._inOrderTraversal(pos);\n    return node._key as K;\n  }\n  find(element: K) {\n    const resNode = this._getTreeNodeByKey(this._root, element);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  union(other: OrderedSet<K>) {\n    const self = this;\n    other.forEach(function (el) {\n      self.insert(el);\n    });\n    return this._length;\n  }\n  * [Symbol.iterator]() {\n    const length = this._length;\n    const nodeList = this._inOrderTraversal();\n    for (let i = 0; i < length; ++i) {\n      yield nodeList[i]._key as K;\n    }\n  }\n  // @ts-ignore\n  eraseElementByIterator(iter: OrderedSetIterator<K>): OrderedSetIterator<K>;\n}\n\nexport default OrderedSet;\n"]}