{"version":3,"file":"index.production.js","sources":["../../../autocomplete-shared/dist/esm/getAttributeValueByPath.js","../../../autocomplete-shared/dist/esm/version.js","../../../autocomplete-shared/dist/esm/userAgents.js","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/requester/createRequester.ts","../../src/search/fetchAlgoliaResults.ts","../../src/requester/createAlgoliaRequester.ts","../../src/requester/getAlgoliaResults.ts","../../src/requester/getAlgoliaFacets.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts"],"sourcesContent":["export function getAttributeValueByPath(record, path) {\n  return path.reduce(function (current, key) {\n    return current && current[key];\n  }, record);\n}","export var version = '1.8.2';","import { version } from './version';\nexport var userAgents = [{\n  segment: 'autocomplete-core',\n  version: version\n}];","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { HighlightedHit } from './HighlightedHit';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends HighlightedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_highlightResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitSnippet<THit extends SnippetedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_snippetResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { fetchAlgoliaResults } from '../search';\nimport type {\n  MultipleQueriesQuery,\n  SearchForFacetValuesResponse,\n  SearchResponse,\n  SearchClient,\n} from '../types';\n\ntype Fetcher = typeof fetchAlgoliaResults;\n\ntype FacetHit = {\n  label: string;\n  count: number;\n  _highlightResult: {\n    label: {\n      value: string;\n    };\n  };\n};\n\nexport type FetcherParams = Pick<\n  Parameters<Fetcher>[0],\n  'searchClient' | 'queries'\n>;\n\nexport type RequesterParams<THit> = {\n  transformResponse(\n    response: TransformResponseParams<THit>\n  ): TransformedRequesterResponse<THit>;\n};\n\ntype TransformResponseParams<THit> = {\n  results: Array<SearchResponse<THit> | SearchForFacetValuesResponse>;\n  hits: Array<SearchResponse<THit>['hits']>;\n  facetHits: FacetHit[][];\n};\n\nexport type TransformedRequesterResponse<THit> =\n  | Array<SearchResponse<THit>['hits']>\n  | SearchResponse<THit>['hits']\n  | FacetHit[][]\n  | FacetHit[];\n\nexport type TransformResponse<THit> = (\n  response: TransformResponseParams<THit>\n) => TransformedRequesterResponse<THit>;\n\ntype FetcherParamsQuery<THit> = {\n  query: MultipleQueriesQuery;\n  sourceId: string;\n  transformResponse: TransformResponse<THit>;\n};\n\ntype ExecuteParams<THit> = {\n  searchClient: SearchClient;\n  requests: Array<FetcherParamsQuery<THit>>;\n};\n\nexport type Execute<THit> = (\n  params: ExecuteParams<THit>\n) => Promise<ExecuteResponse<THit>>;\n\nexport type ExecuteResponse<THit> = Array<{\n  items: SearchResponse<THit> | SearchForFacetValuesResponse;\n  sourceId: string;\n  transformResponse: TransformResponse<THit>;\n}>;\n\nexport type RequestParams<THit> = FetcherParams & {\n  /**\n   * The function to transform the Algolia response before passing it to the Autocomplete state. You have access to the full Algolia results, as well as the pre-computed hits and facet hits.\n   *\n   * This is useful to manipulate the hits, or store data from the results in the [context](https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/context/).\n   */\n  transformResponse?: TransformResponse<THit>;\n};\n\nexport type RequesterDescription<THit> = {\n  /**\n   * The search client used for this request. Multiple queries with the same client are batched (if `requesterId` is also the same).\n   */\n  searchClient: SearchClient;\n  /**\n   * Identifies requesters to confirm their queries should be batched.\n   * This ensures that requesters with the same client but different\n   * post-processing functions don't get batched.\n   * When falsy, batching is disabled.\n   * For example, the Algolia requesters use \"algolia\".\n   */\n  requesterId?: string;\n  /**\n   * The search parameters used for this query.\n   */\n  queries: MultipleQueriesQuery[];\n  /**\n   * Transforms the response of this search before returning it to the caller.\n   */\n  transformResponse: TransformResponse<THit>;\n  /**\n   * Post-processing function for multi-queries.\n   */\n  execute: Execute<THit>;\n};\n\nexport function createRequester(fetcher: Fetcher, requesterId?: string) {\n  function execute<THit>(fetcherParams: ExecuteParams<THit>) {\n    return fetcher<THit>({\n      searchClient: fetcherParams.searchClient,\n      queries: fetcherParams.requests.map((x) => x.query),\n    }).then((responses) =>\n      responses.map((response, index) => {\n        const { sourceId, transformResponse } = fetcherParams.requests[index];\n\n        return {\n          items: response,\n          sourceId,\n          transformResponse,\n        };\n      })\n    );\n  }\n\n  return function createSpecifiedRequester(\n    requesterParams: RequesterParams<any>\n  ) {\n    return function requester<TTHit>(\n      requestParams: RequestParams<TTHit>\n    ): RequesterDescription<TTHit> {\n      return {\n        requesterId,\n        execute,\n        ...requesterParams,\n        ...requestParams,\n      };\n    };\n  };\n}\n","import {\n  userAgents as coreUserAgents,\n  UserAgent,\n} from '@algolia/autocomplete-shared';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport type {\n  MultipleQueriesQuery,\n  SearchForFacetValuesResponse,\n  SearchResponse,\n  SearchClient,\n} from '../types';\n\nexport interface SearchParams {\n  /**\n   * The initialized Algolia search client.\n   */\n  searchClient: SearchClient;\n  /**\n   * A list of queries to execute.\n   */\n  queries: MultipleQueriesQuery[];\n  /**\n   * A list of user agents to add to the search client.\n   *\n   * This is useful to track usage of an integration.\n   */\n  userAgents?: UserAgent[];\n}\n\nexport function fetchAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchParams): Promise<\n  Array<SearchResponse<TRecord> | SearchForFacetValuesResponse>\n> {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [...coreUserAgents, ...userAgents];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient\n    .search<TRecord>(\n      queries.map((searchParameters) => {\n        const { params, ...headers } = searchParameters;\n\n        return {\n          ...headers,\n          params: {\n            hitsPerPage: 5,\n            highlightPreTag: HIGHLIGHT_PRE_TAG,\n            highlightPostTag: HIGHLIGHT_POST_TAG,\n            ...params,\n          },\n        };\n      })\n    )\n    .then((response) => {\n      return response.results;\n    });\n}\n","import { fetchAlgoliaResults } from '../search';\n\nimport { createRequester } from './createRequester';\n\nexport const createAlgoliaRequester = createRequester(\n  fetchAlgoliaResults,\n  'algolia'\n);\n","import { createAlgoliaRequester } from './createAlgoliaRequester';\n\n/**\n * Retrieves Algolia results from multiple indices.\n */\nexport const getAlgoliaResults = createAlgoliaRequester({\n  transformResponse: (response) => response.hits,\n});\n","import type { MultipleQueriesQuery } from '../types';\n\nimport { createAlgoliaRequester } from './createAlgoliaRequester';\nimport { RequestParams } from './createRequester';\n\n/**\n * Retrieves Algolia facet hits from multiple indices.\n */\nexport function getAlgoliaFacets<TTHit>(requestParams: RequestParams<TTHit>) {\n  const requester = createAlgoliaRequester({\n    transformResponse: (response) => response.facetHits,\n  });\n\n  const queries = requestParams.queries.map((query) => ({\n    ...query,\n    type: 'facet',\n  })) as MultipleQueriesQuery[];\n\n  return requester({\n    ...requestParams,\n    queries,\n  });\n}\n","import { HighlightedHit } from './HighlightedHit';\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<\n  THit extends HighlightedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitReverseSnippet<\n  THit extends SnippetedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n"],"names":["getAttributeValueByPath","record","path","reduce","current","key","userAgents","segment","version","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","parseAttribute","_ref","highlightedValue","preTagParts","split","firstValue","shift","parts","initialValue","value","get","add","part","lastPart","length","isHighlighted","push","createAttributeSet","forEach","postTagParts","parseAlgoliaHitHighlight","hit","attribute","Array","isArray","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","isPartHighlighted","i","_parts","_parts2","isNextHighlighted","isPreviousHighlighted","test","replace","character","reverseHighlightedParts","some","map","_objectSpread","parseAlgoliaHitSnippet","createRequester","fetcher","requesterId","execute","fetcherParams","searchClient","queries","requests","x","query","then","responses","response","index","_fetcherParams$reques","items","sourceId","transformResponse","requesterParams","requestParams","fetchAlgoliaResults","_ref$userAgents","addAlgoliaAgent","concat","_toConsumableArray","coreUserAgents","_ref2","search","searchParameters","params","_excluded","hitsPerPage","highlightPreTag","highlightPostTag","results","createAlgoliaRequester","getAlgoliaResults","hits","requester","facetHits","type","props"],"mappings":"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"}